<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 快速开始</title>
      <link href="/post/229924b5.html"/>
      <url>/post/229924b5.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新稳定版本</span></span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure><h3 id="第一个-Vue-应用"><a href="#第一个-Vue-应用" class="headerlink" title="第一个 Vue 应用"></a>第一个 Vue 应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message:&#x27;Hello World!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>一个组件下只能有一个并列的 div</p></blockquote><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;input v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">     <span class="attr">message</span>: <span class="string">&#x27;菜鸟教程!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表循环"><a href="#列表循环" class="headerlink" title="列表循环"></a>列表循环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; $index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-2&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &#x27;菜鸟教程官网&#x27;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &#x27;www.runoob.com&#x27; &#125;,</span><br><span class="line">      &#123; message: &#x27;www.runoob.com&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li>v-if</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;No&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>因为 v-if 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <template> 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>v-show</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><blockquote><p>v-show作用与v-if类似，不同的是v-show的元素会始终渲染并保持在 DOM 中,且v-show不支持<template>标签。</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;message | uppercase&#125;&#125;</span><br><span class="line">&#123;&#123;message | reverse | uppercase&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里reverse并不是内建的过滤器，我们可以用Vue.filter自定义:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;reverse&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>在工程目录<code>/src</code>下创建<code>component</code>文件夹，并在<code>component</code>文件夹下创建一个 <code>firstcomponent.vue</code>并写仿照 App.vue 的格式和前面学到的知识写一个组件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;firstcomponent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;I am a title.&lt;/h1&gt;</span><br><span class="line">    &lt;a&gt; written by &#123;&#123; author &#125;&#125; &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      author: &quot;ethan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在 <code>App.vue</code> 使用组件 ( 因为在 <code>index.html</code> 里面定义了 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 所以就以这个组件作为主入口，方便 )<br><strong>第一步，引入</strong>：在 <code>&lt;script&gt;&lt;/script&gt;</code> 标签内的第一行写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> firstcomponent <span class="keyword">from</span> <span class="string">&#x27;./component/firstcomponent.vue&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>第二步，注册</strong>：在 <code>&lt;script&gt;&lt;/script&gt;</code> 标签内的 <code>data</code> 代码块后面加上 <code>components: &#123; firstcomponent &#125;</code>。<strong>记得中间加英文逗号!!!</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123; firstcomponent &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步，使用</strong>：在 <code>&lt;script&gt;&lt;/script&gt;</code> 内加上 <code>&lt;firstcomponent&gt;&lt;/firstcomponent&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;firstcomponent&gt;&lt;/firstcomponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 多版本管理</title>
      <link href="/post/adab0374.html"/>
      <url>/post/adab0374.html</url>
      
        <content type="html"><![CDATA[<h1 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h1><p>如果你有多个 <code>Node.js</code> 项目，可能会遇到这种情况：你已经安装了最新版本的 <code>Node.js</code>，但是另一个项目却依赖一个较旧的版本。在这种情况下， 你需要安装多个版本的 <code>Node.js</code>（我们不需要再去 <code>nodejs</code> 官网下载安装了，直接通过 <code>nvm</code> 的命令即可安装 <code>nodejs</code> ），并且根据需要随时在它们之间切换。</p><h3 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h3><p>下载地址： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><blockquote><p>推荐使用 <code>nvm-setup.exe</code> 安装版，免去配置麻烦。</p></blockquote><p><strong>注意：先卸载node！！！先卸载node！！！先卸载node！！！（重要的事情说三遍）</strong></p><blockquote><p>若没有把已有的 node 先卸载掉或者卸载不干净，后面 nvm 命令都会失效。</p></blockquote><p><strong>nvm 和 node 的安装目录建议安装到D盘(注意路径千万不要有中文，否则后面会出错)，nodejs 目录是作为软连接目录，存放 nvm 当前指向 node 版本的内容。</strong></p><p><strong>注意：安装完成之后，nvm 会自动配置好环境变量，不需要由我们自己再去配置环境变量了。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br></pre></td></tr></table></figure><p>输出版本号即代表安装成功。</p><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><ul><li>方式一：进入 <code>nvm</code> 安装路径下，打开 <code>setting.txt</code> 文件，最后添加 <code>node</code> 和 <code>npm</code> 的镜像地址</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">root: D:\**\nvm</span><br><span class="line">path: D:\**\nodeJs</span><br><span class="line"></span><br><span class="line">node_mirror: http://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: http://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure><ul><li>方式二：打开 <code>cmd</code> 窗口  (推荐)</li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">nvm node_mirror <span class="symbol">http:</span>/<span class="regexp">/npmmirror.com/mirrors</span><span class="regexp">/node/</span></span><br><span class="line">nvm npm_mirror <span class="symbol">http:</span>/<span class="regexp">/npmmirror.com/mirrors</span><span class="regexp">/npm/</span></span><br></pre></td></tr></table></figure><p>完成以上步骤后，<code>nvm</code> 才算全部安装完毕！</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前所使用的nvm版本号</span></span><br><span class="line">nvm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可在线安装的node.js版本</span></span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的node.js版本，*号表示当前正在用</span></span><br><span class="line">nvm list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前正在使用的node.js版本</span></span><br><span class="line">nvm current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新稳定版</span></span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装指定版本的node.js，[version]为指定的版本号</span></span><br><span class="line">nvm install [version]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定版本的node.js</span></span><br><span class="line">nvm uninstall [version]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换node.js版本</span></span><br><span class="line">nvm use [version]</span><br></pre></td></tr></table></figure><h3 id="常用版本"><a href="#常用版本" class="headerlink" title="常用版本"></a>常用版本</h3><table><thead><tr><th>Node.js Version</th><th>Codename</th><th>Release Date</th><th>npm</th><th></th></tr></thead><tbody><tr><td>v22.7.0</td><td>-</td><td>2024-08-21</td><td>v10.8.2</td><td><a href="https://nodejs.org/download/release/v22.7.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V22.md#22.7.0">Changelog</a><a href="https://nodejs.org/dist/v22.7.0/docs/api/">Docs</a></td></tr><tr><td>v21.7.3</td><td>-</td><td>2024-04-10</td><td>v10.5.0</td><td><a href="https://nodejs.org/download/release/v21.7.3/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#21.7.3">Changelog</a><a href="https://nodejs.org/dist/v21.7.3/docs/api/">Docs</a></td></tr><tr><td>v20.17.0</td><td>Iron</td><td>2024-08-21</td><td>v10.8.2</td><td><a href="https://nodejs.org/download/release/v20.17.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#20.17.0">Changelog</a><a href="https://nodejs.org/dist/v20.17.0/docs/api/">Docs</a></td></tr><tr><td>v19.9.0</td><td>-</td><td>2023-04-10</td><td>v9.6.3</td><td><a href="https://nodejs.org/download/release/v19.9.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V19.md#19.9.0">Changelog</a><a href="https://nodejs.org/dist/v19.9.0/docs/api/">Docs</a></td></tr><tr><td>v18.20.4</td><td>Hydrogen</td><td>2024-07-08</td><td>v10.7.0</td><td><a href="https://nodejs.org/download/release/v18.20.4/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V18.md#18.20.4">Changelog</a><a href="https://nodejs.org/dist/v18.20.4/docs/api/">Docs</a></td></tr><tr><td>v17.9.1</td><td>-</td><td>2022-06-01</td><td>v8.11.0</td><td><a href="https://nodejs.org/download/release/v17.9.1/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#17.9.1">Changelog</a><a href="https://nodejs.org/dist/v17.9.1/docs/api/">Docs</a></td></tr><tr><td>v16.20.2</td><td>Gallium</td><td>2023-08-08</td><td>v8.19.4</td><td><a href="https://nodejs.org/download/release/v16.20.2/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V16.md#16.20.2">Changelog</a><a href="https://nodejs.org/dist/v16.20.2/docs/api/">Docs</a></td></tr><tr><td>v15.14.0</td><td>-</td><td>2021-04-06</td><td>v7.7.6</td><td><a href="https://nodejs.org/download/release/v15.14.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#15.14.0">Changelog</a><a href="https://nodejs.org/dist/v15.14.0/docs/api/">Docs</a></td></tr><tr><td>v14.21.3</td><td>Fermium</td><td>2023-02-16</td><td>v6.14.18</td><td><a href="https://nodejs.org/download/release/v14.21.3/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V14.md#14.21.3">Changelog</a><a href="https://nodejs.org/dist/v14.21.3/docs/api/">Docs</a></td></tr><tr><td>v13.14.0</td><td>-</td><td>2020-04-29</td><td>v6.14.4</td><td><a href="https://nodejs.org/download/release/v13.14.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#13.14.0">Changelog</a><a href="https://nodejs.org/dist/v13.14.0/docs/api/">Docs</a></td></tr><tr><td>v12.22.12</td><td>Erbium</td><td>2022-04-05</td><td>v6.14.16</td><td><a href="https://nodejs.org/download/release/v12.22.12/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V12.md#12.22.12">Changelog</a><a href="https://nodejs.org/dist/v12.22.12/docs/api/">Docs</a></td></tr><tr><td>v11.15.0</td><td>-</td><td>2019-04-30</td><td>v6.7.0</td><td><a href="https://nodejs.org/download/release/v11.15.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V11.md#11.15.0">Changelog</a><a href="https://nodejs.org/dist/v11.15.0/docs/api/">Docs</a></td></tr><tr><td>v10.24.1</td><td>Dubnium</td><td>2021-04-06</td><td>v6.14.12</td><td><a href="https://nodejs.org/download/release/v10.24.1/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V10.md#10.24.1">Changelog</a><a href="https://nodejs.org/dist/v10.24.1/docs/api/">Docs</a></td></tr><tr><td>v9.11.2</td><td>-</td><td>2018-06-12</td><td>v5.6.0</td><td><a href="https://nodejs.org/download/release/v9.11.2/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V9.md#9.11.2">Changelog</a><a href="https://nodejs.org/dist/v9.11.2/docs/api/">Docs</a></td></tr><tr><td>v8.17.0</td><td>Carbon</td><td>2019-12-17</td><td>v6.13.4</td><td><a href="https://nodejs.org/download/release/v8.17.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V8.md#8.17.0">Changelog</a><a href="https://nodejs.org/dist/v8.17.0/docs/api/">Docs</a></td></tr><tr><td>v7.10.1</td><td>-</td><td>2017-07-11</td><td>v4.2.0</td><td><a href="https://nodejs.org/download/release/v7.10.1/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V7.md#7.10.1">Changelog</a><a href="https://nodejs.org/dist/v7.10.1/docs/api/">Docs</a></td></tr><tr><td>v6.17.1</td><td>Boron</td><td>2019-04-03</td><td>v3.10.10</td><td><a href="https://nodejs.org/download/release/v6.17.1/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V6.md#6.17.1">Changelog</a><a href="https://nodejs.org/dist/v6.17.1/docs/api/">Docs</a></td></tr><tr><td>v5.12.0</td><td>-</td><td>2016-06-23</td><td>v3.8.6</td><td><a href="https://nodejs.org/download/release/v5.12.0/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V5.md#5.12.0">Changelog</a><a href="https://nodejs.org/dist/v5.12.0/docs/api/">Docs</a></td></tr><tr><td>v4.9.1</td><td>Argon</td><td>2018-03-29</td><td>v2.15.11</td><td><a href="https://nodejs.org/download/release/v4.9.1/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V4.md#4.9.1">Changelog</a><a href="https://nodejs.org/dist/v4.9.1/docs/api/">Docs</a></td></tr><tr><td>v0.12.18</td><td>-</td><td>2017-02-22</td><td>v2.15.11</td><td><a href="https://nodejs.org/download/release/v0.12.18/">Releases</a><a href="https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V012.md#0.12.18">Changelog</a><a href="https://nodejs.org/dist/v0.12.18/docs/api/">Docs</a></td></tr></tbody></table><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装并指定版本</span></span><br><span class="line">$ nvm install [version]</span><br><span class="line">$ nvm use [version]</span><br><span class="line"><span class="comment"># 检查node是否安装成功</span></span><br><span class="line">$ node -v  </span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p>如果提示报错，则需要用 <code>nvm</code> 指定使用版本。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>设置镜像</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul><li>配置全局目录</li></ul><p>在 node 目录下手动创建全局文件存放目录 node_global 和缓存目录 node_cache</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\**\nodejs\node_global</span><br><span class="line">D:\**\nodejs\node_cache</span><br></pre></td></tr></table></figure><p><code>cmd</code> 命令行窗口输入</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">prefix</span> <span class="string">&quot;D:\**<span class="subst">\n</span>odejs<span class="subst">\n</span>ode_global&quot;</span></span><br><span class="line">npm config <span class="keyword">set</span> cache <span class="string">&quot;D:\**<span class="subst">\n</span>odejs<span class="subst">\n</span>ode_cache&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个Go程序</title>
      <link href="/post/5c3d4808.html"/>
      <url>/post/5c3d4808.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ol><li>在 <code>src</code> 目录下创建一个 <code>hello.go</code> 文件：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">// 声明 main 包，表明当前是一个可执行程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>  <span class="comment">// 导入 fmt 包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;  <span class="comment">// main函数，是程序执行的入口</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">// 在终端打印 Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>src</code> 目录下执行：<code>go run hello.go</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOPATH</title>
      <link href="/post/65b9ed48.html"/>
      <url>/post/65b9ed48.html</url>
      
        <content type="html"><![CDATA[<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p><code>GOPATH</code>是一个环境变量，用来表明你写的 <code>Go</code> 项目的存放路径。</p><p><code>GOPATH</code>路径最好只设置一个，所有的项目代码都放到 <code>GOPATH</code> 的 <code>src</code> 目录下。</p><p>Linux 和 Mac 平台就参照上面配置环境变量的方式将自己的工作目录添加到环境变量中即可。 Windows平台按下面的步骤将（你的安装目录，例如：<code>D:\Go</code>）添加到环境变量：</p><ol><li><p>我的电脑-&gt;属性-&gt;高级系统设置</p></li><li><p>检查一下你的电脑里面是否存在 <code>GOPATH</code> 并且设置值为你要存 <code>Go</code> 代码的目录</p></li><li><p>同时在 <code>Path</code> 里面添加 <code>Go</code> 的安装目录和 <code>GOPATH</code> 目录</p></li></ol><h2 id="Go-项目目录"><a href="#Go-项目目录" class="headerlink" title="Go 项目目录"></a>Go 项目目录</h2><p>在进行 <code>Go</code> 语言开发的时候，我们的代码总是会保存在 <code>$GOPATH/src</code> 目录下。在工程经过 <code>go build</code>、<code>go install</code> 或 <code>go get </code>等指令后，会将下载的第三方包源代码文件放在 <code>$GOPATH/src</code> 目录下， 产生的二进制可执行文件放在 <code>$GOPATH/bin</code> 目录下，生成的中间缓存文件会被保存在 <code>$GOPATH/pkg</code> 下。</p><p>如果我们使用版本管理工具（<code>Version Control System</code>，<code>VCS</code>。常用如<code>Git</code>）来管理我们的项目代码时，我们只需要添加<code>$GOPATH/src</code>目录的源代码即可。<code>bin</code> 和 <code>pkg</code> 目录的内容无需版本控制。</p><h3 id="适合个人开发者"><a href="#适合个人开发者" class="headerlink" title="适合个人开发者"></a>适合个人开发者</h3><p>我们知道源代码都是存放在 <code>GOPATH</code> 的 <code>src</code> 目录下，那我们可以按照下图来组织我们的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── 项目一</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    ├── 项目二</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    └── 项目三</span><br><span class="line">        ├── 模块一</span><br><span class="line">        ├── 模块二</span><br><span class="line">        └── 模块三</span><br></pre></td></tr></table></figure><h3 id="目前流行的项目结构"><a href="#目前流行的项目结构" class="headerlink" title="目前流行的项目结构"></a>目前流行的项目结构</h3><p>Go 语言中也是通过包来组织代码文件，我们可以引用别人的包也可以发布自己的包，但是为了防止不同包的项目名冲突，我们通常使用顶级域名来作为包名的前缀，这样就不担心项目名冲突的问题了。</p><p>因为不是每个个人开发者都拥有自己的顶级域名，所以目前流行的方式是使用个人的 Github 用户名来区分不同的包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── github.com</span><br><span class="line">    │   ├── 项目一</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   ├── 项目二</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   └── 项目三</span><br><span class="line">    │       ├── 模块一</span><br><span class="line">    │       ├── 模块二</span><br><span class="line">    │       └── 模块三</span><br><span class="line">    ├── going.org</span><br><span class="line">    └── gopkg.in</span><br></pre></td></tr></table></figure><p>举个例子：张三和李四都有一个名叫 study 的项目，那么这两个包的路径就会是：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/zhangsan/study&quot;</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/lisi/study&quot;</span></span><br></pre></td></tr></table></figure><h3 id="适合企业开发者"><a href="#适合企业开发者" class="headerlink" title="适合企业开发者"></a>适合企业开发者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin (存放编译后的二进制文件)</span><br><span class="line">├── pkg (存放编译后的库文件)</span><br><span class="line">└── src (存放源码文件)</span><br><span class="line">    ├── code.xxx.com (公司代码仓库域名)</span><br><span class="line">    │   ├── 前端组 (公司内部组织架构)</span><br><span class="line">    │   ├── 后端组</span><br><span class="line">    │   │   ├── 项目1</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   ├── 项目2</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   └── 项目N</span><br><span class="line">    │   └── 基础架构组</span><br><span class="line">    ├── gitee.com</span><br><span class="line">    └── github.com </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 快速入门</title>
      <link href="/post/6b9fbde2.html"/>
      <url>/post/6b9fbde2.html</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>Go 1.16 及以上版本</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要安装 Gin 软件包，需要先安装 Go 并设置 Go 工作区。</p><ol><li>下载并安装 gin：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><blockquote><p>go get 加 -u 和不加 -u 参数的区别：加上它可以利用网络来更新已有的代码包及其依赖包。如果已经下载过一个代码包，但是这个代码包又有更新了，那么这时候可以直接用 -u 标记来更新本地的对应的代码包。如果不加这个 -u 标记，执行 go get 一个已有的代码包，会发现命令什么都不执行。只有加了 -u 标记，命令会去执行 git pull 命令拉取最新的代码包的最新版本，下载并安装。</p><p>不加<code>-g</code>参数，会把依赖包下载<code>.vendor</code>目录下面； 加上<code>-g</code>参数，可以把依赖包下载到<code>GOPATH</code>目录中。</p></blockquote><ol start="2"><li>将 gin 引入到代码中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>（可选）如果使用诸如 http.StatusOK 之类的常量，则需要引入 net&#x2F;http 包：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建你的项目文件夹并 cd 进去，创建一个名为 <code>main.go</code> 的文件</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> main.go</span><br></pre></td></tr></table></figure><ol start="5"><li>接下来，将如下的代码写入 <code>main.go</code> 中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>然后执行 <code>go run main.go</code> 命令来运行代码：</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行 main.go 并且在浏览器中访问 HOST_IP:8080/ping</span></span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 环境搭建</title>
      <link href="/post/a25657cf.html"/>
      <url>/post/a25657cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先去 <a href="https://golang.google.cn/dl/">Go官网</a> 下载 Go 的安装包，根据自己的操作系统，选择相应的安装包下载</p><blockquote><p>说明：本文以 Windows 为例来安装 Go 环境</p></blockquote><p>下载完安装包后，双击安装包，安装即可，Windows 的 Go 默认安装路径为 <code>C:\Program Files\Go\</code>，可修改至 D 盘: <code>D:\Program Files\Go\</code></p><p>执行以下命令来验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Go默认环境变量</span></span><br><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>如果看到正确的打印结果，说明环境安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go get 包下载失败</title>
      <link href="/post/6999fca8.html"/>
      <url>/post/6999fca8.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于某些不可抗力的原因，国内使用 <code>go get</code> 命令安装包时会经常会出现超时的问题。</p><h3 id="Go-1-13-及以上（推荐）"><a href="#Go-1-13-及以上（推荐）" class="headerlink" title="Go 1.13 及以上（推荐）"></a>Go 1.13 及以上（推荐）</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="macOS-或-Linux"><a href="#macOS-或-Linux" class="headerlink" title="macOS 或 Linux"></a>macOS 或 Linux</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on</span><br><span class="line">$ <span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>打开你的 PowerShell 并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\&gt; <span class="variable">$env</span>:GO111MODULE = <span class="string">&quot;on&quot;</span></span><br><span class="line">C:\&gt; <span class="variable">$env</span>:GOPROXY = <span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 打开“开始”并搜索“env”</span><br><span class="line"><span class="number">2</span>. 选择“编辑系统环境变量”</span><br><span class="line"><span class="number">3</span>. 点击“环境变量…”按钮</span><br><span class="line"><span class="number">4</span>. 在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）</span><br><span class="line"><span class="number">5</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">6</span>. 选择“变量名”输入框并输入“GO111MODULE”</span><br><span class="line"><span class="number">7</span>. 选择“变量值”输入框并输入“on”</span><br><span class="line"><span class="number">8</span>. 点击“确定”按钮</span><br><span class="line"><span class="number">9</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">10</span>. 选择“变量名”输入框并输入“GOPROXY”</span><br><span class="line"><span class="number">11</span>. 选择“变量值”输入框并输入“https://goproxy.cn”</span><br><span class="line"><span class="number">12</span>. 点击“确定”按钮</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 环境变量</title>
      <link href="/post/2ddd6919.html"/>
      <url>/post/2ddd6919.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境变量介绍"><a href="#环境变量介绍" class="headerlink" title="环境变量介绍"></a>环境变量介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看全部的go环境变量</span></span><br><span class="line">$ go <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定的go环境变量</span></span><br><span class="line">$ go <span class="built_in">env</span> 环境变量名称 <span class="comment"># （如：go env GOROOT 查看go的安装目录）</span></span><br></pre></td></tr></table></figure><p>下边是我本机的 Go 环境变量</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">set <span class="attr">GO111MODULE</span>=</span><br><span class="line">set <span class="attr">GOARCH</span>=amd64</span><br><span class="line">set <span class="attr">GOBIN</span>=</span><br><span class="line">set <span class="attr">GOCACHE</span>=C:\Users\CaoYiXiong\AppData\Local\go-build</span><br><span class="line">set <span class="attr">GOENV</span>=C:\Users\CaoYiXiong\AppData\Roaming\go\env</span><br><span class="line">set <span class="attr">GOEXE</span>=.exe</span><br><span class="line">set <span class="attr">GOEXPERIMENT</span>=</span><br><span class="line">set <span class="attr">GOFLAGS</span>=</span><br><span class="line">set <span class="attr">GOHOSTARCH</span>=amd64</span><br><span class="line">set <span class="attr">GOHOSTOS</span>=windows</span><br><span class="line">set <span class="attr">GOINSECURE</span>=</span><br><span class="line">set <span class="attr">GOMODCACHE</span>=C:\Users\CaoYiXiong\go\pkg\mod       </span><br><span class="line">set <span class="attr">GONOPROXY</span>=</span><br><span class="line">set <span class="attr">GONOSUMDB</span>=</span><br><span class="line">set <span class="attr">GOOS</span>=windows</span><br><span class="line">set <span class="attr">GOPATH</span>=C:\Users\CaoYiXiong\go</span><br><span class="line">set <span class="attr">GOPRIVATE</span>=</span><br><span class="line">set <span class="attr">GOPROXY</span>=https://proxy.golang.org,direct</span><br><span class="line">set <span class="attr">GOROOT</span>=D:\Program Files\Go</span><br><span class="line">set <span class="attr">GOSUMDB</span>=sum.golang.org</span><br><span class="line">set <span class="attr">GOTMPDIR</span>=</span><br><span class="line">set <span class="attr">GOTOOLCHAIN</span>=auto</span><br><span class="line">set <span class="attr">GOTOOLDIR</span>=D:\Program Files\Go\pkg\tool\windows_amd64</span><br><span class="line">set <span class="attr">GOVCS</span>=</span><br><span class="line">set <span class="attr">GOVERSION</span>=go1.<span class="number">21.0</span></span><br><span class="line">set <span class="attr">GODEBUG</span>=</span><br><span class="line">set <span class="attr">GOTELEMETRY</span>=local</span><br><span class="line">set <span class="attr">GOTELEMETRYDIR</span>=C:\Users\CaoYiXiong\AppData\Roaming\go\telemetry</span><br><span class="line">set <span class="attr">GCCGO</span>=gccgo</span><br><span class="line">set <span class="attr">GOAMD64</span>=v1</span><br><span class="line">set <span class="attr">AR</span>=ar</span><br><span class="line">set <span class="attr">CC</span>=gcc</span><br><span class="line">set <span class="attr">CXX</span>=g++</span><br><span class="line">set <span class="attr">CGO_ENABLED</span>=<span class="number">0</span></span><br><span class="line">set <span class="attr">GOMOD</span>=NUL</span><br><span class="line">set <span class="attr">GOWORK</span>=</span><br><span class="line">set <span class="attr">CGO_CFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_CPPFLAGS</span>=</span><br><span class="line">set <span class="attr">CGO_CXXFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_FFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_LDFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">PKG_CONFIG</span>=pkg-config</span><br><span class="line">set <span class="attr">GOGCCFLAGS</span>=-m64 -f<span class="literal">no</span>-caret-diagnostics -Qunused-arguments -Wl,--<span class="literal">no</span>-gc-sections -fmessage-length=<span class="number">0</span> -ffile-prefix-map=C:\Users\CAOYIX~<span class="number">1</span>\AppData\L</span><br><span class="line">ocal\Temp\<span class="attr">go-build3191654908</span>=/tmp/go-build -g<span class="literal">no</span>-record-gcc-switches</span><br></pre></td></tr></table></figure><p>Go 中可设置的环境变量虽然有很多，但是很多我们可能都用不到，了解以下几个就差不多了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOROOT</span><br><span class="line">GOPATH</span><br><span class="line">GOBIN</span><br><span class="line">GOOS</span><br><span class="line">GOARCH</span><br><span class="line">GOPROXY</span><br><span class="line">GO111MODULE</span><br></pre></td></tr></table></figure><h3 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h3><p><strong>GOROOT 表示 Go 在你的电脑上的安装位置，它的值一般都是 <code>$HOME/go</code>，当然，你也可以安装在别的地方。</strong></p><p>Go 安装目录下的目录结构</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">AUTHORS          官方 Go语言作者列表</span><br><span class="line">CONTRIBUTING<span class="selector-class">.md</span></span><br><span class="line">CONTRIBUTORS     第三方的贡献者</span><br><span class="line">LICENSE          Go语言发布授权协议</span><br><span class="line">PATENTS          专利</span><br><span class="line">README<span class="selector-class">.md</span></span><br><span class="line">SECURITY<span class="selector-class">.md</span></span><br><span class="line">VERSION</span><br><span class="line">api             存放Go API检查器的辅助文件</span><br><span class="line">bin             存放所有由官方提供的Go语言相关工具的可执行文件。默认情况下，该目录会包含go和gofmt这两个工具</span><br><span class="line">doc             存放Go语言几乎全部的<span class="selector-tag">HTML</span>格式的官方文档和说明，方便开发者在离线时查看</span><br><span class="line">favicon<span class="selector-class">.ico</span></span><br><span class="line">lib             文档模版</span><br><span class="line">misc            存放各类编辑器或IDE（集成开发环境）软件的插件，辅助它们查看和编写Go代码</span><br><span class="line">pkg             用于在构建安装后，保存Go语言标准库的所有归档文件。Go源码文件对应于以“<span class="selector-class">.a</span>”为结尾的归档文件，它们就存储在pkg文件夹下的平台相关目录中</span><br><span class="line">robots<span class="selector-class">.txt</span>      搜索引擎robots文件</span><br><span class="line"><span class="attribute">src</span>             存放所有标准库、Go语言工具，以及相关底层库（C语言实现）的源码</span><br><span class="line">test            存放测试Go语言自身代码的文件</span><br></pre></td></tr></table></figure><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><blockquote><p>说明：GOPATH 的值不能和 GOROOT 值相同</p></blockquote><p><strong>GOPATH 用来存放我们项目的源代码</strong>。</p><p>GOPATH 可以设置多个值，也就是多个工作区，多个工作区之间用分号隔开</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">GOPATH</span>=C:\Users\CaoYiXiong\Go<span class="comment">;D:\Go</span></span><br></pre></td></tr></table></figure><p><strong>如果 GOPATH 设置了两个工作区，当我们执行 <code>go get</code> 命令去获取远程库的时候，它会选择最前边那个工作区进行安装。</strong></p><p>按照 Go 语言的开发规范，工作区目录下一般分三个子目录：</p><ul><li><p>bin：存放编译后的可执行文件；</p></li><li><p>pkg：存放编译后的包文件；</p></li><li><p>src：存放项目源文件</p></li></ul><p>通常 <code>bin</code> 和 <code>pkg</code> 目录可以不创建，Go 命令会自动创建（如 <code>go install</code> ），只需要创建手动去创建 <code>src</code> 目录即可。</p><h3 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h3><p><strong>GOBIN 用来存放我们的项目代码编译后生成的二进制文件</strong> 。</p><p>当我们使用 <code>go install</code> 命令编译打包我们的项目代码时，它会将编译后生成的二进制文件放入到 GOBIN 指定的目录下。<strong>如果没有指定GOBIN目录，默认是GOPATH&#x2F;bin</strong></p><h3 id="GOOS"><a href="#GOOS" class="headerlink" title="GOOS"></a>GOOS</h3><p><strong>GOOS 表示目标机器的操作系统</strong>。</p><p>例如：linux、darwin、windows、netbsd、freebsd、openbsd、solaris，通过执行 <code>go env GOOS</code> 查看</p><h3 id="GOARCH"><a href="#GOARCH" class="headerlink" title="GOARCH"></a>GOARCH</h3><p><strong>GOARCH 表示目标机器的处理器架构</strong>。</p><p>例如： amd64、386、arm。GOARCH 和 GOOS 是成对出现的。</p><blockquote><p>GOOS 和 GOARCH 这两个环境变量有什么作用呢？</p></blockquote><p>如果我们想在一个平台上可以生成在另一个平台上运行的程序，就需要借助这两个环境变量。对于其它的编程语言，如果想实现在一个平台上可以生成在另一个平台上运行的程序，比如在32位的 windows 操作系统环境中，生成可以在64位 Linux 操作系统上运行的二进制程序，通常需要借助第三方的工具才能够实现。但是在 GO 语言中，只需要设置 GOOS 和 GOARCH 这两个环境变量就可以实现</p><p>比如我现在在32位的 windows 操作系统中，想编译能在64为的 Linux 系统运行的目标程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置GOOS和GOARCH分别为 linux amd64</span></span><br><span class="line">$ go <span class="built_in">env</span> -w GOOS=linux</span><br><span class="line">$ go <span class="built_in">env</span> -w GOARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、编译目标源代码</span></span><br><span class="line">$ go build test.go</span><br></pre></td></tr></table></figure><h3 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h3><p><strong>GOPROXY 是 <code>go get</code> 下载依赖时使用的代理地址列表</strong>。该环境变量也可以设置多个值，多个值之间使用逗号或竖杠分隔。GOPROXY 的默认值为：<code>https://proxy.golang.org,direct</code></p><p>当用 Go 命令查找依赖模块时，它会按顺序访问 GOPROXY 列表中的每个代理，直到收到成功的响应或出现终端错误。</p><p>GOPROXY 中可能会存在两个关键字来代替代理URL</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">off:不允许从任何源下载依赖的模块</span></span><br><span class="line"><span class="section">direct: 直接从版本控制存储库下载，而不是使用模块代理</span></span><br></pre></td></tr></table></figure><h3 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h3><blockquote><p>说明：如果你是 Go 语言入门的小白，不知道什么是代码包、命令源码文件等等，建议先不看这部分，直接看最后的结果，解决安装好 Go 之后，无法编译运行引入其它依赖包的命令源码文件问题</p></blockquote><p>GO111MODULE 是 <code>go modules</code> 功能的开关，**<code>go modules</code> 是 Go 语言的依赖解决方案**。</p><p>为了方便理解下边的内容，首先需要知道，当我们编译一个依赖了其它包的 Go 源码文件时，Go 查找依赖包的过程是什么样的？这个关乎到 Go 的版本以及 GO111MODULE 环境变量的配置。</p><p>我的安装的 Go 版本及GO111MODULE 配置如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.0 windows/amd64</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> GO111MODULE</span><br><span class="line">GO111MODULE=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>先看一下我的项目目录结构以及文件内容</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── demo</span><br><span class="line">    │   └── main.<span class="keyword">go</span></span><br><span class="line">    └── study</span><br><span class="line">        └── study.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p> <code>main.go</code> 内容：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;study&quot;</span> <span class="comment">// 引入study这个包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">study.Test() <span class="comment">// 使用study这个包下的Test()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>study.go</code> 内容：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> study</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Just a test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我使用 <code>go run main.go</code> 去编译运行 <code>main.go</code> 这个源码文件，看一下会提示什么？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">main.go:3:8: package study is not <span class="keyword">in</span> std (D:\Program Files\Go\src\study)</span><br></pre></td></tr></table></figure><p>提示说：study 这个包，不在 GOROOT 这个路径下。也就是说，它在编译执行的过程中，会去 GOROOT 目录下找使用到的依赖包。关于它如何去找这个包，就跟我们环境变量 <strong>GO111MODULE</strong> 有关。</p><p>下边就看看 <strong>GO111MODULE</strong> 设置不同的值，会有什么样的影响</p><blockquote><p>要想了解 go modules 到底解决了什么问题，先要了解我设置不同的值，会有什么样的效果</p></blockquote><ul><li><strong>GO111MODULE&#x3D;off，无模块支持</strong>。Go 命令行将不会支持模块功能，寻找依赖包的方式将会沿用旧版本那种通过 vendor 目录或者 GOPATH 模式来查找。意思就是，当我们编译执行一个 Go 源码文件的时候，如果文件中有依赖其它包，它会首先去 GOROOT 指定的路径下查找，然后再去 GOPATH 指定的路径下查找。</li><li><strong>GO111MODULE&#x3D;on，模块支持</strong>。Go 命令行会使用模块功能，而一点也不会去 GOPATH 目录下查找。</li><li><strong>GO111MODULE&#x3D;auto，默认值</strong>。Go 命令行将会根据当前目录来决定是否启用模块功能。这种情况下可以分为两种情形： <ul><li>当前目录在 GOPATH&#x2F;src 之外且该目录包含 <code>go.mod</code> 文件，开启模块支持。 </li><li>当前文件在包含 <code>go.mod</code> 文件的目录下面。</li></ul></li></ul><p>我安装的go是 1.21.0 版本的，GO111MODULE 默认是空，可以理解成上边说的 <code>auto</code>，当该值为 <code>auto</code> 时，Go 在找相关依赖的时候，并不会去 GOPATH 中找，所以上边我们编译执行 <code>study.go</code> 的时候，会提示找不到依赖。解决办法就是将 GO111MODULE 设置成 <code>off</code>，我们期望的是它在找依赖的时候，如果在 GOROOT 下没有找到的时候，会去 GOPATH 下边找。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">设置GO111MODULE的值为off</span><br><span class="line">go env -w <span class="attr">GO111MODULE</span>=<span class="literal">off</span></span><br></pre></td></tr></table></figure><p>此时再编译执行 <code>study.go</code>，就可以正常打印出结果了</p><blockquote><p>go modules 解决了什么问题？</p></blockquote><ol><li>解决 Go 语言长久以来的依赖管理问题</li><li>“淘汰”现有的 GOPATH 的使用模式</li><li>统一社区中的其它的依赖管理工具（提供迁移功能）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu LNMP</title>
      <link href="/post/cf5a4069.html"/>
      <url>/post/cf5a4069.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、分步安装（推荐方法）"><a href="#一、分步安装（推荐方法）" class="headerlink" title="一、分步安装（推荐方法）"></a>一、分步安装（推荐方法）</h3><h4 id="1-Nginx-安装"><a href="#1-Nginx-安装" class="headerlink" title="1. Nginx 安装"></a>1. <code>Nginx</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本 浏览器访问 127.0.0.1 可见 Welcome to nginx! 说明安装成功</span></span><br><span class="line">nginx -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> service nginx status</span><br><span class="line"><span class="built_in">sudo</span> systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 停止 重启</span></span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/nginx start|stop|restart</span><br><span class="line"><span class="built_in">sudo</span> service nginx start|stop|restart</span><br><span class="line"><span class="built_in">sudo</span> systemctl start|stop|restart nginx</span><br></pre></td></tr></table></figure><h4 id="2-MySQL-安装"><a href="#2-MySQL-安装" class="headerlink" title="2. MySQL 安装"></a>2. <code>MySQL</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 默认安装mysql-client;默认root登录为auth_socket验证，需要先设置为密码验证</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">mysql -V</span><br></pre></td></tr></table></figure><p>安装完成后，运行预先安装了 <code>MySQL</code> 的安全脚本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure><p>系统会询问您是否要配置<code>VALIDATE PASSWORD PLUGIN</code> </p><blockquote><p><strong>注意：</strong> 如果启用，与指定条件不匹配的密码将被MySQL拒绝并出现错误。 虽然禁用验证是安全的，但建议使用强大唯一的密码。</p></blockquote><p>按 <code>Y</code> 设置或者其他按键继续而不设置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No:</span><br></pre></td></tr></table></figure><p>如果回复 <code>Y</code>，则会要求选择一个密码验证级别。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1</span><br></pre></td></tr></table></figure><p>无论您是否选择设置 <code>VALIDATE PASSWORD PLUGIN</code> ，服务器都会要求选择并确认MySQL <code>root</code> 用户的密码。 这是MySQL中具有增加权限的管理帐户。</p><p>如果启用了密码验证，则会显示 <code>root</code> 用户的密码强度，是否还需要更改？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100</span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) : n</span><br></pre></td></tr></table></figure><p>对于其余的问题，请在每个提示下按<code>Y</code>并<code>ENTER</code>按键。这将删除一些匿名用户和测试数据库，禁用远程root登录，并加载这些新规则，以便MySQL立即尊重您所做的更改。</p><blockquote><p>注意，在运行MySQL 5.7（及更高版本）的Ubuntu系统中，默认情况下，MySQL <strong>根</strong>用户设置为使用<code>auth_socket</code>插件而非密码进行身份验证。</p></blockquote><p>如果希望 <code>root</code> 使用密码连接，则需要将其身份验证方法从切换<code>auth_socket</code>为<code>mysql_native_password</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><p>接下来，使用以下命令检查每个MySQL用户帐户使用的身份验证方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure><p>运行<code>ALTER USER</code>命令。确保更改<code>password</code>为您选择的强密码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;your_password&#x27;;</span><br></pre></td></tr></table></figure><p>运行<code>FLUSH PRIVILEGES</code>重新加载授权表并使新的更改生效：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="3-PHP-安装"><a href="#3-PHP-安装" class="headerlink" title="3. PHP 安装"></a>3. <code>PHP</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装PHP及必要模块</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y php-fpm php-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本 Ubuntu18.04默认PHP7.2</span></span><br><span class="line">php -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他常用扩展</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install php-amqp php-bz2 php-curl php-dev php-fpm php-gd php-ldap php-mbstring php-soap php-sqlite3 php-xdebug php-xml php-xmlrpc php-zip</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu18.04 PHP其他版本安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用Ondrej PHP存储库</span></span><br><span class="line"><span class="built_in">sudo</span> apt install software-properties-common</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:ondrej/php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP7.3</span></span><br><span class="line"><span class="built_in">sudo</span> apt install php7.3 php7.3-common php7.3-opcache php7.3-cli php7.3-gd php7.3-curl php7.3-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP7.1</span></span><br><span class="line"><span class="built_in">sudo</span> apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql</span><br></pre></td></tr></table></figure><p>安装完成重启 <code>Nginx</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service nginx restart</span><br></pre></td></tr></table></figure><h4 id="4-虚拟主机安装"><a href="#4-虚拟主机安装" class="headerlink" title="4. 虚拟主机安装"></a>4. 虚拟主机安装</h4><ol><li>项目文件夹</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新项目文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /var/www/your_domain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配文件夹的所有权</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/your_domain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 755 /var/www/your_domain</span><br></pre></td></tr></table></figure><ol start="2"><li>创建项目文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /var/www/your_domain/index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>新增虚拟主机域名</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟主机链接</span></span><br><span class="line">127.0.0.1your_domain.test</span><br></pre></td></tr></table></figure><ol start="4"><li>创建虚拟主机文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制默认文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/lee</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑主机文件</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/sites-available/lee</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80; <span class="comment"># 监听端口</span></span><br><span class="line">        root /var/www/your_domain; <span class="comment"># 根目录</span></span><br><span class="line">        index index.php index.html index.htm index.nginx-debian.html; <span class="comment"># 入口文件</span></span><br><span class="line">        server_name your_domain.com; <span class="comment"># 域名</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets/fastcgi-php.conf;</span><br><span class="line">                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>创建软连接</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/lee /etc/nginx/sites-enabled/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试语法</span></span><br><span class="line"><span class="built_in">sudo</span> nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Nginx</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure><ol start="6"><li>浏览器访问 <code>your_domain.test</code> 即可。</li></ol><h4 id="5-PHPMyAdmin-安装"><a href="#5-PHPMyAdmin-安装" class="headerlink" title="5. PHPMyAdmin 安装"></a>5. <code>PHPMyAdmin</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：自动安装，创建软链接 PHPMyAdmin与PHP7.2存在兼容问题，界面会出现报错 可忽略</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器选择 apache2 SPACE选中，TAB然后ENTER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置软链接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：[官网下载](https://www.phpmyadmin.net)，解压到web根目录。</span></span><br><span class="line"><span class="built_in">sudo</span> unzip -d /var/www/html phpmyadmin-4.8.2.zip//压缩包名称</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> phpmyadmin-4.8.2 phpmyadmin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Mac主题</title>
      <link href="/post/e3bb099c.html"/>
      <url>/post/e3bb099c.html</url>
      
        <content type="html"><![CDATA[<h3 id="Gnome"><a href="#Gnome" class="headerlink" title="Gnome"></a>Gnome</h3><p>命令行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gnome-tweak-tool gnome-shell-extensions chrome-gnome-shell</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Gnome插件地址：<a href="https://extensions.gnome.org/">https://extensions.gnome.org</a></p><ul><li><a href="https://extensions.gnome.org/extension/19/user-themes/">User Themes</a>：改变Gnome主题必要插件</li><li><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a>：类似于Mac底部Dash插件</li></ul><p>推荐插件</p><ul><li><p><a href="https://extensions.gnome.org/extension/120/system-monitor/">System-monitor</a>：系统资源显示</p></li><li><p><a href="https://extensions.gnome.org/extension/7/removable-drive-menu/">Removable Drive Menu</a>：U盘快速操作</p></li><li><p><a href="https://extensions.gnome.org/extension/1031/topicons/">TopIcons Plus</a>：自定义顶部图标展示</p></li><li><p><a href="https://extensions.gnome.org/extension/36/lock-keys/">Lock Keys</a>：大小写与数字键盘指示器</p></li><li><p><a href="https://extensions.gnome.org/extension/21/workspace-indicator/">Workspace Indicator</a>：当前多窗口Index</p></li><li><p><a href="https://extensions.gnome.org/extension/517/caffeine/">Caffeine</a>：是否让电脑休眠快捷方式，打开不休眠</p></li><li><p><a href="https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/">Bing Wallpaper Changer</a>：桌面Bing壁纸每日更新</p></li><li><p><a href="https://extensions.gnome.org/extension/750/openweather/">OpenWeather</a>：天气</p></li></ul><h3 id="创建自定义主题和图标文件夹"><a href="#创建自定义主题和图标文件夹" class="headerlink" title="创建自定义主题和图标文件夹"></a>创建自定义主题和图标文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.themes</span><br><span class="line"><span class="built_in">mkdir</span> ~/.icons</span><br></pre></td></tr></table></figure><h3 id="下载主题和图标资源包"><a href="#下载主题和图标资源包" class="headerlink" title="下载主题和图标资源包"></a>下载主题和图标资源包</h3><p>主题资源地址：<a href="https://gnome-look.org/">https://gnome-look.org</a> 查找对应资源下载即可。Ubuntu18.04支持性较好。</p><ul><li><p>主题：<a href="https://www.gnome-look.org/p/1275087/">https://www.gnome-look.org/p/1275087/</a></p></li><li><p>图标：<a href="https://www.gnome-look.org/p/1305429/">https://www.gnome-look.org/p/1305429/</a></p></li></ul><h3 id="解压美化"><a href="#解压美化" class="headerlink" title="解压美化"></a>解压美化</h3><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压主题文件</span></span><br><span class="line">tar -xf XXX.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动主题文件</span></span><br><span class="line"><span class="built_in">mv</span> XXX ~/.themes</span><br></pre></td></tr></table></figure><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压图标文件</span></span><br><span class="line">tar -xf XXX.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动图标文件</span></span><br><span class="line"><span class="built_in">mv</span> XXX ~/.icons</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Crontab 计划任务</title>
      <link href="/post/23e9f638.html"/>
      <url>/post/23e9f638.html</url>
      
        <content type="html"><![CDATA[<p>主要工作：</p><ul><li>系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存。</li><li>个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab(选项)(参数)</span><br><span class="line">-l : 列出该用户的计时器设置 crontab -l</span><br><span class="line">-e : 编辑该用户的计时器设置 crontab -e</span><br><span class="line">-r : 删除该用户的计时器设置 crontab -r</span><br><span class="line">-u&lt;用户名称&gt; : 指定要设定计时器的用户名称 crontab -u yi -e</span><br><span class="line"></span><br><span class="line">计划任务</span><br><span class="line">minute   hour   day   month   week   <span class="built_in">command</span> &gt;&gt; log.log</span><br><span class="line">分 时 日 月 周 命令 &gt;&gt; 日志</span><br><span class="line">0-59   0-23   1-31   1-12     0-6</span><br><span class="line">星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class="line">逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，<span class="string">&#x27;1,2,5,7,8,9&#x27;</span></span><br><span class="line">中杠（-）：可以用整数之间的中杠表示一个整数范围，例如<span class="string">&#x27;2-6&#x27;</span>表示<span class="string">&#x27;2,3,4,5,6&#x27;</span></span><br><span class="line">正斜线（/）：可以用正斜线指定时间的间隔频率，例如<span class="string">&#x27;0-23/2&#x27;</span>表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次</span><br><span class="line">Example ： * * * * * php /var/www/html/test.php &gt;&gt; /var/www/html/log.log</span><br><span class="line"><span class="comment"># 每分钟运行一次test.php文件，将日志记录到log文件</span></span><br><span class="line">crontab修改编辑器直接执行命令：select-editor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu LAMP</title>
      <link href="/post/c4060754.html"/>
      <url>/post/c4060754.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、分步安装（推荐方法）"><a href="#一、分步安装（推荐方法）" class="headerlink" title="一、分步安装（推荐方法）"></a>一、分步安装（推荐方法）</h3><h4 id="1-Apache-安装"><a href="#1-Apache-安装" class="headerlink" title="1. Apache 安装"></a>1. <code>Apache</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本 浏览器访问 127.0.0.1 可见 it works 说明安装成功</span></span><br><span class="line">apache2 -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="built_in">sudo</span> service apache2 status</span><br><span class="line"><span class="built_in">sudo</span> systemctl status apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 停止 重启</span></span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 start|stop|restart</span><br><span class="line"><span class="built_in">sudo</span> service apache2 start|stop|restart</span><br><span class="line"><span class="built_in">sudo</span> systemctl start|stop|restart apache2</span><br></pre></td></tr></table></figure><h4 id="2-MySQL-安装"><a href="#2-MySQL-安装" class="headerlink" title="2. MySQL 安装"></a>2. <code>MySQL</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 默认安装mysql-client;默认root登录为auth_socket验证，需要先设置为密码验证</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">mysql -V</span><br></pre></td></tr></table></figure><p>安装完成后，运行预先安装了 <code>MySQL</code> 的安全脚本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure><p>系统会询问您是否要配置<code>VALIDATE PASSWORD PLUGIN</code> </p><blockquote><p><strong>注意：</strong> 如果启用，与指定条件不匹配的密码将被MySQL拒绝并出现错误。 虽然禁用验证是安全的，但建议使用强大唯一的密码。</p></blockquote><p>按 <code>Y</code> 设置或者其他按键继续而不设置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VALIDATE PASSWORD PLUGIN can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the <span class="built_in">users</span> to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No:</span><br></pre></td></tr></table></figure><p>如果回复 <code>Y</code>，则会要求选择一个密码验证级别。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1</span><br></pre></td></tr></table></figure><p>无论您是否选择设置 <code>VALIDATE PASSWORD PLUGIN</code> ，服务器都会要求选择并确认MySQL <code>root</code> 用户的密码。 这是MySQL中具有增加权限的管理帐户。</p><p>如果启用了密码验证，则会显示 <code>root</code> 用户的密码强度，是否还需要更改？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100</span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) : n</span><br></pre></td></tr></table></figure><p>对于其余的问题，请在每个提示下按<code>Y</code>并<code>ENTER</code>按键。这将删除一些匿名用户和测试数据库，禁用远程root登录，并加载这些新规则，以便MySQL立即尊重您所做的更改。</p><blockquote><p>注意，在运行MySQL 5.7（及更高版本）的Ubuntu系统中，默认情况下，MySQL <strong>根</strong>用户设置为使用<code>auth_socket</code>插件而非密码进行身份验证。</p></blockquote><p>如果希望 <code>root</code> 使用密码连接，则需要将其身份验证方法从切换<code>auth_socket</code>为<code>mysql_native_password</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><p>接下来，使用以下命令检查每个MySQL用户帐户使用的身份验证方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure><p>运行<code>ALTER USER</code>命令。确保更改<code>password</code>为您选择的强密码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;your_password&#x27;;</span><br></pre></td></tr></table></figure><p>运行<code>FLUSH PRIVILEGES</code>重新加载授权表并使新的更改生效：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="3-PHP-安装"><a href="#3-PHP-安装" class="headerlink" title="3. PHP 安装"></a>3. <code>PHP</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装PHP及必要模块</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install php libapache2-mod-php php-mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本 Ubuntu18.04默认PHP7.2</span></span><br><span class="line">php -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他常用扩展，可挑选安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install php-amqp php-bz2 php-curl php-dev php-fpm php-gd php-ldap php-mbstring php-soap php-sqlite3 php-xdebug php-xml php-xmlrpc php-zip</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu18.04 PHP其他版本安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用Ondrej PHP存储库</span></span><br><span class="line"><span class="built_in">sudo</span> apt install software-properties-common</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:ondrej/php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP7.3</span></span><br><span class="line"><span class="built_in">sudo</span> apt install php7.3 php7.3-common php7.3-opcache php7.3-cli php7.3-gd php7.3-curl php7.3-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP7.1</span></span><br><span class="line"><span class="built_in">sudo</span> apt install php7.1 php7.1-common php7.1-opcache php7.1-mcrypt php7.1-cli php7.1-gd php7.1-curl php7.1-mysql</span><br></pre></td></tr></table></figure><p>安装完成重启 <code>Apache</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service apache2 restart</span><br></pre></td></tr></table></figure><h4 id="4-虚拟主机安装"><a href="#4-虚拟主机安装" class="headerlink" title="4. 虚拟主机安装"></a>4. 虚拟主机安装</h4><ol><li>项目文件夹</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新项目文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /var/www/your_domain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配文件夹的所有权</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/your_domain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 755 /var/www/your_domain</span><br></pre></td></tr></table></figure><ol start="2"><li>创建项目文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /var/www/your_domain/index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>新增虚拟主机域名</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟主机链接</span></span><br><span class="line">127.0.0.1your_domain.test</span><br></pre></td></tr></table></figure><ol start="4"><li>创建虚拟主机文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制默认文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/your_domain.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑主机文件</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/apache2/sites-available/your_domain.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@localhost</span><br><span class="line">    ServerName your_domain.test</span><br><span class="line">    DocumentRoot /var/www/your_domain</span><br><span class="line">    ErrorLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">    CustomLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建软连接</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line"><span class="built_in">sudo</span> a2ensite your_domain.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试语法</span></span><br><span class="line"><span class="built_in">sudo</span> apache2ctl configtest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Apache</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart apache2</span><br></pre></td></tr></table></figure><ol start="6"><li>浏览器访问 <code>your_domain.test</code> 即可。</li></ol><h4 id="5-PHPMyAdmin-安装"><a href="#5-PHPMyAdmin-安装" class="headerlink" title="5. PHPMyAdmin 安装"></a>5. <code>PHPMyAdmin</code> 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：自动安装，创建软链接 PHPMyAdmin与PHP7.2存在兼容问题，界面会出现报错 可忽略</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器选择 apache2 SPACE选中，TAB然后ENTER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置软链接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：[官网下载](https://www.phpmyadmin.net)，解压到web根目录。</span></span><br><span class="line"><span class="built_in">sudo</span> unzip -d /var/www/html phpmyadmin-4.8.2.zip//压缩包名称</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> phpmyadmin-4.8.2 phpmyadmin</span><br></pre></td></tr></table></figure><h3 id="二、集成安装"><a href="#二、集成安装" class="headerlink" title="二、集成安装"></a>二、集成安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装集成软件</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install tasksel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 lamp</span></span><br><span class="line"><span class="built_in">sudo</span> tasksel install lamp-server</span><br></pre></td></tr></table></figure><blockquote><p>未测试，暂不推荐</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux AWK命令</title>
      <link href="/post/d486874b.html"/>
      <url>/post/d486874b.html</url>
      
        <content type="html"><![CDATA[<h1 id="AWK命令"><a href="#AWK命令" class="headerlink" title="AWK命令"></a>AWK命令</h1><p><code>awk</code> 是用于 Unix 和类 Unix 系统的强大文本解析工具，但是由于它有可编程函数，因此你可以用它来执行常规解析任务，因此它也被视为一种编程语言。你可能不会使用 <code>awk</code> 开发下一个 GUI 应用，并且它可能不会代替你的默认脚本语言，但是它是用于特定任务的强大程序。</p><p>这些任务或许是惊人的多样化。了解 <code>awk</code> 可以解决你的哪些问题的最好方法是学习 <code>awk</code>。你会惊讶于 <code>awk</code> 如何帮助你完成更多工作，却花费更少的精力。</p><p><code>awk</code> 的基本语法是：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [options] <span class="string">&#x27;pattern &#123;action&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure><p>首先，创建此示例文件并将其保存为 <code>colours.txt</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name       color  amount</span><br><span class="line">apple      red    4</span><br><span class="line">banana     yellow 6</span><br><span class="line">strawberry red    3</span><br><span class="line">grape      purple 10</span><br><span class="line">apple      green  8</span><br><span class="line">plum       purple 2</span><br><span class="line">kiwi       brown  4</span><br><span class="line">potato     brown  9</span><br><span class="line">pineapple  yellow 5</span><br></pre></td></tr></table></figure><p>数据被一个或多个空格分隔为列。以某种方式组织要分析的数据是很常见的。它不一定总是由空格分隔的列，甚至可以不是逗号或分号，但尤其是在日志文件或数据转储中，通常有一个可预测的格式。你可以使用数据格式来帮助 <code>awk</code> 提取和处理你关注的数据。</p><h3 id="打印列"><a href="#打印列" class="headerlink" title="打印列"></a>打印列</h3><p>在 <code>awk</code> 中，<code>print</code> 函数显示你指定的内容。你可以使用许多预定义的变量，但是最常见的是文本文件中以整数命名的列。试试看：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print $2;&#125;&#x27;</span> colours.txt</span><br><span class="line">color</span><br><span class="line">red</span><br><span class="line">yellow</span><br><span class="line">red</span><br><span class="line">purple</span><br><span class="line">green</span><br><span class="line">purple</span><br><span class="line">brown</span><br><span class="line">brown</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure><p>在这里，<code>awk</code> 显示第二列，用 <code>$2</code> 表示。这是相对直观的，因此你可能会猜测 <code>print $1</code> 显示第一列，而 <code>print $3</code> 显示第三列，依此类推。</p><p>要显示<em>全部</em>列，请使用 <code>$0</code>。</p><p>美元符号（<code>$</code>）后的数字是<em>表达式</em>，因此 <code>$2</code> 和 <code>$(1+1)</code> 是同一意思。</p><h3 id="有条件地选择列"><a href="#有条件地选择列" class="headerlink" title="有条件地选择列"></a>有条件地选择列</h3><p>你使用的示例文件非常结构化。它有一行充当标题，并且各列直接相互关联。通过定义<em>条件</em>，你可以限定 <code>awk</code> 在找到此数据时返回的内容。例如，要查看第二列中与 <code>yellow</code> 匹配的项并打印第一列的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$2==&quot;yellow&quot;&#123;print $1&#125;&#x27;</span> file1.txt</span><br><span class="line">banana</span><br><span class="line">pineapple</span><br></pre></td></tr></table></figure><p>正则表达式也可以工作。此表达式近似匹配 <code>$2</code> 中以 <code>p</code> 开头跟上任意数量（一个或多个）字符后继续跟上 <code>p</code> 的值：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;$2 ~ /p.+p/ &#123;print $0&#125;&#x27;</span> colours.txt</span><br><span class="line">grape   purple  10</span><br><span class="line">plum    purple  2</span><br></pre></td></tr></table></figure><p>数字能被 <code>awk</code> 自然解释。例如，要打印第三列包含大于 5 的整数的行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;$3&gt;5 &#123;print $1, $2&#125;&#x27;</span> colours.txt</span><br><span class="line">name    color</span><br><span class="line">banana  yellow</span><br><span class="line">grape   purple</span><br><span class="line">apple   green</span><br><span class="line">potato  brown</span><br></pre></td></tr></table></figure><h3 id="字段分隔符"><a href="#字段分隔符" class="headerlink" title="字段分隔符"></a>字段分隔符</h3><p>默认情况下，<code>awk</code> 使用空格作为字段分隔符。但是，并非所有文本文件都使用空格来定义字段。例如，用以下内容创建一个名为 <code>colours.csv</code> 的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name,color,amount</span><br><span class="line">apple,red,4</span><br><span class="line">banana,yellow,6</span><br><span class="line">strawberry,red,3</span><br><span class="line">grape,purple,10</span><br><span class="line">apple,green,8</span><br><span class="line">plum,purple,2</span><br><span class="line">kiwi,brown,4</span><br><span class="line">potato,brown,9</span><br><span class="line">pineapple,yellow,5</span><br></pre></td></tr></table></figure><p>只要你指定将哪个字符用作命令中的字段分隔符，<code>awk</code> 就能以完全相同的方式处理数据。使用 <code>--field-separator</code>（或简称为 <code>-F</code>）选项来定义分隔符：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F<span class="string">&quot;,&quot;</span> <span class="string">&#x27;$2==&quot;yellow&quot; &#123;print $1&#125;&#x27;</span> file1.csv</span><br><span class="line">banana</span><br><span class="line">pineapple</span><br></pre></td></tr></table></figure><h3 id="保存输出"><a href="#保存输出" class="headerlink" title="保存输出"></a>保存输出</h3><p>使用输出重定向，你可以将结果写入文件。例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F, <span class="string">&#x27;$3&gt;5 &#123;print $1, $2&#125; colours.csv &gt; output.txt</span></span><br></pre></td></tr></table></figure><p>这将创建一个包含 <code>awk</code> 查询内容的文件。</p><p>你还可以将文件拆分为按列数据分组的多个文件。例如，如果要根据每行显示的颜色将 <code>colours.txt</code> 拆分为多个文件，你可以在 <code>awk</code> 中包含重定向语句来重定向<em>每条查询</em>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print &gt; $2&quot;.txt&quot;&#125;&#x27;</span> colours.txt</span><br></pre></td></tr></table></figure><p>这将生成名为 <code>yellow.txt</code>、<code>red.txt</code> 等文件。</p><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> urlogfile | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr -k1 | <span class="built_in">head</span> -n 10</span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /usr/local/nginx/logs/localhost.access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr -k1 | <span class="built_in">head</span> -n 10</span><br></pre></td></tr></table></figure><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/log/httpd/&amp;&amp;\</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> access_log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -rn -k1 | <span class="built_in">head</span> -n 10</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><p>awk ‘{ print $1}’：取数据的低1域（第1列）</p><p>sort：对IP部分进行排序。</p><p>uniq -c：打印每一重复行出现的次数。（并去掉重复行）</p><p>sort -nr -k1：按照重复行出现的次序倒序排列,-k1以第一列为标准排序。</p><p>head -n 10：取排在前5位的IP 。</p></blockquote><p><code>apache</code> 日志分析可以获得很多有用的信息，现在来试试最基本的，获取最多访问的前 10 个 <code>IP</code> 地址及访问次数。</p><p>既然是统计，那么 <code>awk</code> 是必不可少的，好用而高效。</p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;a[$1] += 1;&#125; END &#123;for (i in a) printf(&quot;%d %s\n&quot;, a[i], i);&#125;&#x27;</span> 日志文件 | <span class="built_in">sort</span> -n | <span class="built_in">tail</span></span><br></pre></td></tr></table></figure><p>首先用 <code>awk</code> 统计出来一个列表，然后用 <code>sort</code> 进行排序，最后用 <code>tail</code> 取最后的 10 个。</p><p>以上参数可以略作修改显示更多的数据，比如将 <code>tail</code> 加上 <code>-n</code> 参数等，另外日志格式不同命令也可能需要稍作修改。</p><p>当前WEB服务器中联接次数最多的 <code>IP</code> 地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntu |awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> |<span class="built_in">sort</span> | <span class="built_in">uniq</span> -c| <span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure><p>查看日志中访问次数最多的前 10 个 <code>IP</code> 地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log |<span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 |<span class="built_in">sort</span> |<span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | awk <span class="string">&#x27;&#123;print $0 &#125;&#x27;</span> | <span class="built_in">head</span> -n 10 |less</span><br></pre></td></tr></table></figure><p>查看日志中出现100次以上的 <code>IP</code> 地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log |<span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 |<span class="built_in">sort</span> |<span class="built_in">uniq</span> -c | awk <span class="string">&#x27;&#123;if ($1 &gt; 100) print $0&#125;&#x27;</span>｜<span class="built_in">sort</span> -nr |less</span><br></pre></td></tr></table></figure><p>查看最近访问量最高的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log |<span class="built_in">tail</span> -10000|awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -nr|less</span><br></pre></td></tr></table></figure><p>查看日志中访问超过100次的页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 7 | <span class="built_in">sort</span> |<span class="built_in">uniq</span> -c | awk <span class="string">&#x27;&#123;if ($1 &gt; 100) print $0&#125;&#x27;</span> | less</span><br></pre></td></tr></table></figure><p>统计某url，一天的访问次数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log|grep <span class="string">&#x27;12/Aug/2009&#x27;</span>|grep <span class="string">&#x27;/images/index/e1.gif&#x27;</span>|<span class="built_in">wc</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>前五天的访问次数最多的网页</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log|awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|<span class="built_in">uniq</span> -c |<span class="built_in">sort</span> -n -r|<span class="built_in">head</span> -20</span><br></pre></td></tr></table></figure><p>从日志里查看该 <code>IP</code> 在干嘛</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log | grep 218.66.36.119| awk <span class="string">&#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | less</span><br></pre></td></tr></table></figure><p>列出传输时间超过 30 秒的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log|awk <span class="string">&#x27;($NF &gt; 30)&#123;print $7&#125;&#x27;</span> |<span class="built_in">sort</span> -n|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -nr|<span class="built_in">head</span> -20</span><br></pre></td></tr></table></figure><p>列出最最耗时的页面(超过60秒的)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> access_log |awk <span class="string">&#x27;($NF &gt; 60 &amp;&amp; $7~/\.php/)&#123;print $7&#125;&#x27;</span> |<span class="built_in">sort</span> -n|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -nr|<span class="built_in">head</span> -100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWK </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
