<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一个Go程序</title>
      <link href="/post/5c3d4808.html"/>
      <url>/post/5c3d4808.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ol><li>在 <code>src</code> 目录下创建一个 <code>hello.go</code> 文件：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">// 声明 main 包，表明当前是一个可执行程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>  <span class="comment">// 导入 fmt 包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;  <span class="comment">// main函数，是程序执行的入口</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">// 在终端打印 Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>src</code> 目录下执行：<code>go run hello.go</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOPATH</title>
      <link href="/post/65b9ed48.html"/>
      <url>/post/65b9ed48.html</url>
      
        <content type="html"><![CDATA[<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p><code>GOPATH</code>是一个环境变量，用来表明你写的 <code>Go</code> 项目的存放路径。</p><p><code>GOPATH</code>路径最好只设置一个，所有的项目代码都放到 <code>GOPATH</code> 的 <code>src</code> 目录下。</p><p>Linux 和 Mac 平台就参照上面配置环境变量的方式将自己的工作目录添加到环境变量中即可。 Windows平台按下面的步骤将（你的安装目录，例如：<code>D:\Go</code>）添加到环境变量：</p><ol><li><p>我的电脑-&gt;属性-&gt;高级系统设置</p></li><li><p>检查一下你的电脑里面是否存在 <code>GOPATH</code> 并且设置值为你要存 <code>Go</code> 代码的目录</p></li><li><p>同时在 <code>Path</code> 里面添加 <code>Go</code> 的安装目录和 <code>GOPATH</code> 目录</p></li></ol><h2 id="Go-项目目录"><a href="#Go-项目目录" class="headerlink" title="Go 项目目录"></a>Go 项目目录</h2><p>在进行 <code>Go</code> 语言开发的时候，我们的代码总是会保存在 <code>$GOPATH/src</code> 目录下。在工程经过 <code>go build</code>、<code>go install</code> 或 <code>go get </code>等指令后，会将下载的第三方包源代码文件放在 <code>$GOPATH/src</code> 目录下， 产生的二进制可执行文件放在 <code>$GOPATH/bin</code> 目录下，生成的中间缓存文件会被保存在 <code>$GOPATH/pkg</code> 下。</p><p>如果我们使用版本管理工具（<code>Version Control System</code>，<code>VCS</code>。常用如<code>Git</code>）来管理我们的项目代码时，我们只需要添加<code>$GOPATH/src</code>目录的源代码即可。<code>bin</code> 和 <code>pkg</code> 目录的内容无需版本控制。</p><h3 id="适合个人开发者"><a href="#适合个人开发者" class="headerlink" title="适合个人开发者"></a>适合个人开发者</h3><p>我们知道源代码都是存放在 <code>GOPATH</code> 的 <code>src</code> 目录下，那我们可以按照下图来组织我们的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── 项目一</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    ├── 项目二</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    └── 项目三</span><br><span class="line">        ├── 模块一</span><br><span class="line">        ├── 模块二</span><br><span class="line">        └── 模块三</span><br></pre></td></tr></table></figure><h3 id="目前流行的项目结构"><a href="#目前流行的项目结构" class="headerlink" title="目前流行的项目结构"></a>目前流行的项目结构</h3><p>Go 语言中也是通过包来组织代码文件，我们可以引用别人的包也可以发布自己的包，但是为了防止不同包的项目名冲突，我们通常使用顶级域名来作为包名的前缀，这样就不担心项目名冲突的问题了。</p><p>因为不是每个个人开发者都拥有自己的顶级域名，所以目前流行的方式是使用个人的 Github 用户名来区分不同的包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── github.com</span><br><span class="line">    │   ├── 项目一</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   ├── 项目二</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   └── 项目三</span><br><span class="line">    │       ├── 模块一</span><br><span class="line">    │       ├── 模块二</span><br><span class="line">    │       └── 模块三</span><br><span class="line">    ├── going.org</span><br><span class="line">    └── gopkg.in</span><br></pre></td></tr></table></figure><p>举个例子：张三和李四都有一个名叫 study 的项目，那么这两个包的路径就会是：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/zhangsan/study&quot;</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/lisi/study&quot;</span></span><br></pre></td></tr></table></figure><h3 id="适合企业开发者"><a href="#适合企业开发者" class="headerlink" title="适合企业开发者"></a>适合企业开发者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin (存放编译后的二进制文件)</span><br><span class="line">├── pkg (存放编译后的库文件)</span><br><span class="line">└── src (存放源码文件)</span><br><span class="line">    ├── code.xxx.com (公司代码仓库域名)</span><br><span class="line">    │   ├── 前端组 (公司内部组织架构)</span><br><span class="line">    │   ├── 后端组</span><br><span class="line">    │   │   ├── 项目1</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   ├── 项目2</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   └── 项目N</span><br><span class="line">    │   └── 基础架构组</span><br><span class="line">    ├── gitee.com</span><br><span class="line">    └── github.com </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 快速入门</title>
      <link href="/post/6b9fbde2.html"/>
      <url>/post/6b9fbde2.html</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>Go 1.16 及以上版本</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要安装 Gin 软件包，需要先安装 Go 并设置 Go 工作区。</p><ol><li>下载并安装 gin：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><blockquote><p>go get 加 -u 和不加 -u 参数的区别：加上它可以利用网络来更新已有的代码包及其依赖包。如果已经下载过一个代码包，但是这个代码包又有更新了，那么这时候可以直接用 -u 标记来更新本地的对应的代码包。如果不加这个 -u 标记，执行 go get 一个已有的代码包，会发现命令什么都不执行。只有加了 -u 标记，命令会去执行 git pull 命令拉取最新的代码包的最新版本，下载并安装。</p><p>不加<code>-g</code>参数，会把依赖包下载<code>.vendor</code>目录下面； 加上<code>-g</code>参数，可以把依赖包下载到<code>GOPATH</code>目录中。</p></blockquote><ol start="2"><li>将 gin 引入到代码中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>（可选）如果使用诸如 http.StatusOK 之类的常量，则需要引入 net&#x2F;http 包：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建你的项目文件夹并 cd 进去，创建一个名为 <code>main.go</code> 的文件</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> main.go</span><br></pre></td></tr></table></figure><ol start="5"><li>接下来，将如下的代码写入 <code>main.go</code> 中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>然后执行 <code>go run main.go</code> 命令来运行代码：</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行 main.go 并且在浏览器中访问 HOST_IP:8080/ping</span></span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 环境搭建</title>
      <link href="/post/a25657cf.html"/>
      <url>/post/a25657cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先去 <a href="https://golang.google.cn/dl/">Go官网</a> 下载 Go 的安装包，根据自己的操作系统，选择相应的安装包下载</p><blockquote><p>说明：本文以 Windows 为例来安装 Go 环境</p></blockquote><p>下载完安装包后，双击安装包，安装即可，Windows 的 Go 默认安装路径为 <code>C:\Program Files\Go\</code>，可修改至 D 盘: <code>D:\Program Files\Go\</code></p><p>执行以下命令来验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Go默认环境变量</span></span><br><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>如果看到正确的打印结果，说明环境安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go get 包下载失败</title>
      <link href="/post/6999fca8.html"/>
      <url>/post/6999fca8.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于某些不可抗力的原因，国内使用 <code>go get</code> 命令安装包时会经常会出现超时的问题。</p><h3 id="Go-1-13-及以上（推荐）"><a href="#Go-1-13-及以上（推荐）" class="headerlink" title="Go 1.13 及以上（推荐）"></a>Go 1.13 及以上（推荐）</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="macOS-或-Linux"><a href="#macOS-或-Linux" class="headerlink" title="macOS 或 Linux"></a>macOS 或 Linux</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on</span><br><span class="line">$ <span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>打开你的 PowerShell 并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\&gt; <span class="variable">$env</span>:GO111MODULE = <span class="string">&quot;on&quot;</span></span><br><span class="line">C:\&gt; <span class="variable">$env</span>:GOPROXY = <span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 打开“开始”并搜索“env”</span><br><span class="line"><span class="number">2</span>. 选择“编辑系统环境变量”</span><br><span class="line"><span class="number">3</span>. 点击“环境变量…”按钮</span><br><span class="line"><span class="number">4</span>. 在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）</span><br><span class="line"><span class="number">5</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">6</span>. 选择“变量名”输入框并输入“GO111MODULE”</span><br><span class="line"><span class="number">7</span>. 选择“变量值”输入框并输入“on”</span><br><span class="line"><span class="number">8</span>. 点击“确定”按钮</span><br><span class="line"><span class="number">9</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">10</span>. 选择“变量名”输入框并输入“GOPROXY”</span><br><span class="line"><span class="number">11</span>. 选择“变量值”输入框并输入“https://goproxy.cn”</span><br><span class="line"><span class="number">12</span>. 点击“确定”按钮</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 环境变量</title>
      <link href="/post/2ddd6919.html"/>
      <url>/post/2ddd6919.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境变量介绍"><a href="#环境变量介绍" class="headerlink" title="环境变量介绍"></a>环境变量介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看全部的go环境变量</span></span><br><span class="line">$ go <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定的go环境变量</span></span><br><span class="line">$ go <span class="built_in">env</span> 环境变量名称 <span class="comment"># （如：go env GOROOT 查看go的安装目录）</span></span><br></pre></td></tr></table></figure><p>下边是我本机的 Go 环境变量</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">set <span class="attr">GO111MODULE</span>=</span><br><span class="line">set <span class="attr">GOARCH</span>=amd64</span><br><span class="line">set <span class="attr">GOBIN</span>=</span><br><span class="line">set <span class="attr">GOCACHE</span>=C:\Users\CaoYiXiong\AppData\Local\go-build</span><br><span class="line">set <span class="attr">GOENV</span>=C:\Users\CaoYiXiong\AppData\Roaming\go\env</span><br><span class="line">set <span class="attr">GOEXE</span>=.exe</span><br><span class="line">set <span class="attr">GOEXPERIMENT</span>=</span><br><span class="line">set <span class="attr">GOFLAGS</span>=</span><br><span class="line">set <span class="attr">GOHOSTARCH</span>=amd64</span><br><span class="line">set <span class="attr">GOHOSTOS</span>=windows</span><br><span class="line">set <span class="attr">GOINSECURE</span>=</span><br><span class="line">set <span class="attr">GOMODCACHE</span>=C:\Users\CaoYiXiong\go\pkg\mod       </span><br><span class="line">set <span class="attr">GONOPROXY</span>=</span><br><span class="line">set <span class="attr">GONOSUMDB</span>=</span><br><span class="line">set <span class="attr">GOOS</span>=windows</span><br><span class="line">set <span class="attr">GOPATH</span>=C:\Users\CaoYiXiong\go</span><br><span class="line">set <span class="attr">GOPRIVATE</span>=</span><br><span class="line">set <span class="attr">GOPROXY</span>=https://proxy.golang.org,direct</span><br><span class="line">set <span class="attr">GOROOT</span>=D:\Program Files\Go</span><br><span class="line">set <span class="attr">GOSUMDB</span>=sum.golang.org</span><br><span class="line">set <span class="attr">GOTMPDIR</span>=</span><br><span class="line">set <span class="attr">GOTOOLCHAIN</span>=auto</span><br><span class="line">set <span class="attr">GOTOOLDIR</span>=D:\Program Files\Go\pkg\tool\windows_amd64</span><br><span class="line">set <span class="attr">GOVCS</span>=</span><br><span class="line">set <span class="attr">GOVERSION</span>=go1.<span class="number">21.0</span></span><br><span class="line">set <span class="attr">GODEBUG</span>=</span><br><span class="line">set <span class="attr">GOTELEMETRY</span>=local</span><br><span class="line">set <span class="attr">GOTELEMETRYDIR</span>=C:\Users\CaoYiXiong\AppData\Roaming\go\telemetry</span><br><span class="line">set <span class="attr">GCCGO</span>=gccgo</span><br><span class="line">set <span class="attr">GOAMD64</span>=v1</span><br><span class="line">set <span class="attr">AR</span>=ar</span><br><span class="line">set <span class="attr">CC</span>=gcc</span><br><span class="line">set <span class="attr">CXX</span>=g++</span><br><span class="line">set <span class="attr">CGO_ENABLED</span>=<span class="number">0</span></span><br><span class="line">set <span class="attr">GOMOD</span>=NUL</span><br><span class="line">set <span class="attr">GOWORK</span>=</span><br><span class="line">set <span class="attr">CGO_CFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_CPPFLAGS</span>=</span><br><span class="line">set <span class="attr">CGO_CXXFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_FFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">CGO_LDFLAGS</span>=-O2 -g</span><br><span class="line">set <span class="attr">PKG_CONFIG</span>=pkg-config</span><br><span class="line">set <span class="attr">GOGCCFLAGS</span>=-m64 -f<span class="literal">no</span>-caret-diagnostics -Qunused-arguments -Wl,--<span class="literal">no</span>-gc-sections -fmessage-length=<span class="number">0</span> -ffile-prefix-map=C:\Users\CAOYIX~<span class="number">1</span>\AppData\L</span><br><span class="line">ocal\Temp\<span class="attr">go-build3191654908</span>=/tmp/go-build -g<span class="literal">no</span>-record-gcc-switches</span><br></pre></td></tr></table></figure><p>Go 中可设置的环境变量虽然有很多，但是很多我们可能都用不到，了解以下几个就差不多了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOROOT</span><br><span class="line">GOPATH</span><br><span class="line">GOBIN</span><br><span class="line">GOOS</span><br><span class="line">GOARCH</span><br><span class="line">GOPROXY</span><br><span class="line">GO111MODULE</span><br></pre></td></tr></table></figure><h3 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h3><p><strong>GOROOT 表示 Go 在你的电脑上的安装位置，它的值一般都是 <code>$HOME/go</code>，当然，你也可以安装在别的地方。</strong></p><p>Go 安装目录下的目录结构</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">AUTHORS          官方 Go语言作者列表</span><br><span class="line">CONTRIBUTING<span class="selector-class">.md</span></span><br><span class="line">CONTRIBUTORS     第三方的贡献者</span><br><span class="line">LICENSE          Go语言发布授权协议</span><br><span class="line">PATENTS          专利</span><br><span class="line">README<span class="selector-class">.md</span></span><br><span class="line">SECURITY<span class="selector-class">.md</span></span><br><span class="line">VERSION</span><br><span class="line">api             存放Go API检查器的辅助文件</span><br><span class="line">bin             存放所有由官方提供的Go语言相关工具的可执行文件。默认情况下，该目录会包含go和gofmt这两个工具</span><br><span class="line">doc             存放Go语言几乎全部的<span class="selector-tag">HTML</span>格式的官方文档和说明，方便开发者在离线时查看</span><br><span class="line">favicon<span class="selector-class">.ico</span></span><br><span class="line">lib             文档模版</span><br><span class="line">misc            存放各类编辑器或IDE（集成开发环境）软件的插件，辅助它们查看和编写Go代码</span><br><span class="line">pkg             用于在构建安装后，保存Go语言标准库的所有归档文件。Go源码文件对应于以“<span class="selector-class">.a</span>”为结尾的归档文件，它们就存储在pkg文件夹下的平台相关目录中</span><br><span class="line">robots<span class="selector-class">.txt</span>      搜索引擎robots文件</span><br><span class="line"><span class="attribute">src</span>             存放所有标准库、Go语言工具，以及相关底层库（C语言实现）的源码</span><br><span class="line">test            存放测试Go语言自身代码的文件</span><br></pre></td></tr></table></figure><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><blockquote><p>说明：GOPATH 的值不能和 GOROOT 值相同</p></blockquote><p><strong>GOPATH 用来存放我们项目的源代码</strong>。</p><p>GOPATH 可以设置多个值，也就是多个工作区，多个工作区之间用分号隔开</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">GOPATH</span>=C:\Users\CaoYiXiong\Go<span class="comment">;D:\Go</span></span><br></pre></td></tr></table></figure><p><strong>如果 GOPATH 设置了两个工作区，当我们执行 <code>go get</code> 命令去获取远程库的时候，它会选择最前边那个工作区进行安装。</strong></p><p>按照 Go 语言的开发规范，工作区目录下一般分三个子目录：</p><ul><li><p>bin：存放编译后的可执行文件；</p></li><li><p>pkg：存放编译后的包文件；</p></li><li><p>src：存放项目源文件</p></li></ul><p>通常 <code>bin</code> 和 <code>pkg</code> 目录可以不创建，Go 命令会自动创建（如 <code>go install</code> ），只需要创建手动去创建 <code>src</code> 目录即可。</p><h3 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h3><p><strong>GOBIN 用来存放我们的项目代码编译后生成的二进制文件</strong> 。</p><p>当我们使用 <code>go install</code> 命令编译打包我们的项目代码时，它会将编译后生成的二进制文件放入到 GOBIN 指定的目录下。<strong>如果没有指定GOBIN目录，默认是GOPATH&#x2F;bin</strong></p><h3 id="GOOS"><a href="#GOOS" class="headerlink" title="GOOS"></a>GOOS</h3><p><strong>GOOS 表示目标机器的操作系统</strong>。</p><p>例如：linux、darwin、windows、netbsd、freebsd、openbsd、solaris，通过执行 <code>go env GOOS</code> 查看</p><h3 id="GOARCH"><a href="#GOARCH" class="headerlink" title="GOARCH"></a>GOARCH</h3><p><strong>GOARCH 表示目标机器的处理器架构</strong>。</p><p>例如： amd64、386、arm。GOARCH 和 GOOS 是成对出现的。</p><blockquote><p>GOOS 和 GOARCH 这两个环境变量有什么作用呢？</p></blockquote><p>如果我们想在一个平台上可以生成在另一个平台上运行的程序，就需要借助这两个环境变量。对于其它的编程语言，如果想实现在一个平台上可以生成在另一个平台上运行的程序，比如在32位的 windows 操作系统环境中，生成可以在64位 Linux 操作系统上运行的二进制程序，通常需要借助第三方的工具才能够实现。但是在 GO 语言中，只需要设置 GOOS 和 GOARCH 这两个环境变量就可以实现</p><p>比如我现在在32位的 windows 操作系统中，想编译能在64为的 Linux 系统运行的目标程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、设置GOOS和GOARCH分别为 linux amd64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、编译目标源代码</span></span><br><span class="line">$ go build test.go</span><br></pre></td></tr></table></figure><h3 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h3><p><strong>GOPROXY 是 <code>go get</code> 下载依赖时使用的代理地址列表</strong>。该环境变量也可以设置多个值，多个值之间使用逗号或竖杠分隔。GOPROXY 的默认值为：<code>https://proxy.golang.org,direct</code></p><p>当用 Go 命令查找依赖模块时，它会按顺序访问 GOPROXY 列表中的每个代理，直到收到成功的响应或出现终端错误。</p><p>GOPROXY 中可能会存在两个关键字来代替代理URL</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">off:不允许从任何源下载依赖的模块</span></span><br><span class="line"><span class="section">direct: 直接从版本控制存储库下载，而不是使用模块代理</span></span><br></pre></td></tr></table></figure><h3 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h3><blockquote><p>说明：如果你是 Go 语言入门的小白，不知道什么是代码包、命令源码文件等等，建议先不看这部分，直接看最后的结果，解决安装好 Go 之后，无法编译运行引入其它依赖包的命令源码文件问题</p></blockquote><p>GO111MODULE 是 <code>go modules</code> 功能的开关，**<code>go modules</code> 是 Go 语言的依赖解决方案**。</p><p>为了方便理解下边的内容，首先需要知道，当我们编译一个依赖了其它包的 Go 源码文件时，Go 查找依赖包的过程是什么样的？这个关乎到 Go 的版本以及 GO111MODULE 环境变量的配置。</p><p>我的安装的 Go 版本及GO111MODULE 配置如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.21.0 windows/amd64</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> GO111MODULE</span><br><span class="line">GO111MODULE=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>先看一下我的项目目录结构以及文件内容</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── demo</span><br><span class="line">    │   └── main.<span class="keyword">go</span></span><br><span class="line">    └── study</span><br><span class="line">        └── study.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p> <code>main.go</code> 内容：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;study&quot;</span> <span class="comment">// 引入study这个包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">study.Test() <span class="comment">// 使用study这个包下的Test()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>study.go</code> 内容：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> study</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Just a test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我使用 <code>go run main.go</code> 去编译运行 <code>main.go</code> 这个源码文件，看一下会提示什么？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">main.go:3:8: package study is not <span class="keyword">in</span> std (D:\Program Files\Go\src\study)</span><br></pre></td></tr></table></figure><p>提示说：study 这个包，不在 GOROOT 这个路径下。也就是说，它在编译执行的过程中，会去 GOROOT 目录下找使用到的依赖包。关于它如何去找这个包，就跟我们环境变量 <strong>GO111MODULE</strong> 有关。</p><p>下边就看看 <strong>GO111MODULE</strong> 设置不同的值，会有什么样的影响</p><blockquote><p>要想了解 go modules 到底解决了什么问题，先要了解我设置不同的值，会有什么样的效果</p></blockquote><ul><li><strong>GO111MODULE&#x3D;off，无模块支持</strong>。Go 命令行将不会支持模块功能，寻找依赖包的方式将会沿用旧版本那种通过 vendor 目录或者 GOPATH 模式来查找。意思就是，当我们编译执行一个 Go 源码文件的时候，如果文件中有依赖其它包，它会首先去 GOROOT 指定的路径下查找，然后再去 GOPATH 指定的路径下查找。</li><li><strong>GO111MODULE&#x3D;on，模块支持</strong>。Go 命令行会使用模块功能，而一点也不会去 GOPATH 目录下查找。</li><li><strong>GO111MODULE&#x3D;auto，默认值</strong>。Go 命令行将会根据当前目录来决定是否启用模块功能。这种情况下可以分为两种情形： <ul><li>当前目录在 GOPATH&#x2F;src 之外且该目录包含 <code>go.mod</code> 文件，开启模块支持。 </li><li>当前文件在包含 <code>go.mod</code> 文件的目录下面。</li></ul></li></ul><p>我安装的go是 1.21.0 版本的，GO111MODULE 默认是空，可以理解成上边说的 <code>auto</code>，当该值为 <code>auto</code> 时，Go 在找相关依赖的时候，并不会去 GOPATH 中找，所以上边我们编译执行 <code>study.go</code> 的时候，会提示找不到依赖。解决办法就是将 GO111MODULE 设置成 <code>off</code>，我们期望的是它在找依赖的时候，如果在 GOROOT 下没有找到的时候，会去 GOPATH 下边找。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">设置GO111MODULE的值为off</span><br><span class="line">go env -w <span class="attr">GO111MODULE</span>=<span class="literal">off</span></span><br></pre></td></tr></table></figure><p>此时再编译执行 <code>study.go</code>，就可以正常打印出结果了</p><blockquote><p>go modules 解决了什么问题？</p></blockquote><ol><li>解决 Go 语言长久以来的依赖管理问题</li><li>“淘汰”现有的 GOPATH 的使用模式</li><li>统一社区中的其它的依赖管理工具（提供迁移功能）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
