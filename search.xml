<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GOPATH</title>
      <link href="/post/65b9ed48.html"/>
      <url>/post/65b9ed48.html</url>
      
        <content type="html"><![CDATA[<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p><code>GOPATH</code>是一个环境变量，用来表明你写的 <code>go</code> 项目的存放路径。</p><p><code>GOPATH</code>路径最好只设置一个，所有的项目代码都放到 <code>GOPATH</code> 的 <code>src</code> 目录下。</p><p>Linux 和 Mac 平台就参照上面配置环境变量的方式将自己的工作目录添加到环境变量中即可。 Windows平台按下面的步骤将（你的安装目录，例如：<code>D:\Go</code>）添加到环境变量：</p><p>1.我的电脑-&gt;属性-&gt;高级系统设置</p><p>检查一下你的电脑里面是否存在 <code>GOPATH</code> 并且设置值为你要存 <code>go</code> 代码的目录</p><p>同时在 <code>path</code> 里面添加 <code>go</code> 的安装目录和 <code>GOPATH</code> 目录</p><h2 id="Go-项目目录"><a href="#Go-项目目录" class="headerlink" title="Go 项目目录"></a>Go 项目目录</h2><p>在进行 <code>Go</code> 语言开发的时候，我们的代码总是会保存在 <code>$GOPATH/src</code> 目录下。在工程经过 <code>go build</code>、<code>go install</code> 或 <code>go get </code>等指令后，会将下载的第三方包源代码文件放在 <code>$GOPATH/src</code> 目录下， 产生的二进制可执行文件放在 <code>$GOPATH/bin</code> 目录下，生成的中间缓存文件会被保存在 <code>$GOPATH/pkg</code> 下。</p><p>如果我们使用版本管理工具（<code>Version Control System</code>，<code>VCS</code>。常用如<code>Git</code>）来管理我们的项目代码时，我们只需要添加<code>$GOPATH/src</code>目录的源代码即可。<code>bin</code> 和 <code>pkg</code> 目录的内容无需版本控制。</p><h3 id="适合个人开发者"><a href="#适合个人开发者" class="headerlink" title="适合个人开发者"></a>适合个人开发者</h3><p>我们知道源代码都是存放在 <code>GOPATH</code> 的 <code>src</code> 目录下，那我们可以按照下图来组织我们的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── 项目一</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    ├── 项目二</span><br><span class="line">    │   ├── 模块一</span><br><span class="line">    │   ├── 模块二</span><br><span class="line">    │   └── 模块三</span><br><span class="line">    └── 项目三</span><br><span class="line">        ├── 模块一</span><br><span class="line">        ├── 模块二</span><br><span class="line">        └── 模块三</span><br></pre></td></tr></table></figure><h3 id="目前流行的项目结构"><a href="#目前流行的项目结构" class="headerlink" title="目前流行的项目结构"></a>目前流行的项目结构</h3><p>Go 语言中也是通过包来组织代码文件，我们可以引用别人的包也可以发布自己的包，但是为了防止不同包的项目名冲突，我们通常使用顶级域名来作为包名的前缀，这样就不担心项目名冲突的问题了。</p><p>因为不是每个个人开发者都拥有自己的顶级域名，所以目前流行的方式是使用个人的 github 用户名来区分不同的包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    ├── github.com</span><br><span class="line">    │   ├── 项目一</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   ├── 项目二</span><br><span class="line">    │   │   ├── 模块一</span><br><span class="line">    │   │   ├── 模块二</span><br><span class="line">    │   │   └── 模块三</span><br><span class="line">    │   └── 项目三</span><br><span class="line">    │       ├── 模块一</span><br><span class="line">    │       ├── 模块二</span><br><span class="line">    │       └── 模块三</span><br><span class="line">    ├── going.org</span><br><span class="line">    └── gopkg.in</span><br></pre></td></tr></table></figure><p>举个例子：张三和李四都有一个名叫 studygo 的项目，那么这两个包的路径就会是：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/zhangsan/studygo&quot;</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/lisi/studygo&quot;</span></span><br></pre></td></tr></table></figure><p>以后我们从<code>github</code>上下载别人包的时候，如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p>那么，这个包会下载到我们本地<code>GOPATH</code>目录下的<code>src/github.com/gin-gonic/gin</code></p><h3 id="适合企业开发者"><a href="#适合企业开发者" class="headerlink" title="适合企业开发者"></a>适合企业开发者</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOPATH</span><br><span class="line">├── bin (存放编译后的二进制文件)</span><br><span class="line">├── pkg (存放编译后的库文件)</span><br><span class="line">└── src (存放源码文件)</span><br><span class="line">    ├── code.xxx.com (公司代码仓库域名)</span><br><span class="line">    │   ├── 前端组 (公司内部组织架构)</span><br><span class="line">    │   ├── 后端组</span><br><span class="line">    │   │   ├── 项目1</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   ├── 项目2</span><br><span class="line">    │   │   │   ├── 模块A</span><br><span class="line">    │   │   │   ├── 模块B</span><br><span class="line">    │   │   │   └── 模块C</span><br><span class="line">    │   │   └── 项目N</span><br><span class="line">    │   └── 基础架构组</span><br><span class="line">    ├── gitee.com</span><br><span class="line">    └── github.com </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 快速入门</title>
      <link href="/post/6b9fbde2.html"/>
      <url>/post/6b9fbde2.html</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>Go 1.16 及以上版本</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要安装 Gin 软件包，需要先安装 Go 并设置 Go 工作区。</p><ol><li>下载并安装 gin：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><blockquote><p>go get 加 -u 和不加 -u 参数的区别：加上它可以利用网络来更新已有的代码包及其依赖包。如果已经下载过一个代码包，但是这个代码包又有更新了，那么这时候可以直接用 -u 标记来更新本地的对应的代码包。如果不加这个 -u 标记，执行 go get 一个已有的代码包，会发现命令什么都不执行。只有加了 -u 标记，命令会去执行 git pull 命令拉取最新的代码包的最新版本，下载并安装。</p><p>不加<code>-g</code>参数，会把依赖包下载<code>.vendor</code>目录下面； 加上<code>-g</code>参数，可以把依赖包下载到<code>GOPATH</code>目录中。</p></blockquote><ol start="2"><li>将 gin 引入到代码中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>（可选）如果使用诸如 http.StatusOK 之类的常量，则需要引入 net&#x2F;http 包：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建你的项目文件夹并 cd 进去，创建一个名为 <code>main.go</code> 的文件</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> main.go</span><br></pre></td></tr></table></figure><ol start="5"><li>接下来，将如下的代码写入 <code>main.go</code> 中：</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>然后执行 <code>go run main.go</code> 命令来运行代码：</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行 main.go 并且在浏览器中访问 HOST_IP:8080/ping</span></span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go get 包下载失败</title>
      <link href="/post/6999fca8.html"/>
      <url>/post/6999fca8.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于某些不可抗力的原因，国内使用 <code>go get</code> 命令安装包时会经常会出现超时的问题。</p><h3 id="Go-1-13-及以上（推荐）"><a href="#Go-1-13-及以上（推荐）" class="headerlink" title="Go 1.13 及以上（推荐）"></a>Go 1.13 及以上（推荐）</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="macOS-或-Linux"><a href="#macOS-或-Linux" class="headerlink" title="macOS 或 Linux"></a>macOS 或 Linux</h3><p>打开你的终端并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on</span><br><span class="line">$ <span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>打开你的 PowerShell 并执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\&gt; <span class="variable">$env</span>:GO111MODULE = <span class="string">&quot;on&quot;</span></span><br><span class="line">C:\&gt; <span class="variable">$env</span>:GOPROXY = <span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 打开“开始”并搜索“env”</span><br><span class="line"><span class="number">2</span>. 选择“编辑系统环境变量”</span><br><span class="line"><span class="number">3</span>. 点击“环境变量…”按钮</span><br><span class="line"><span class="number">4</span>. 在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）</span><br><span class="line"><span class="number">5</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">6</span>. 选择“变量名”输入框并输入“GO111MODULE”</span><br><span class="line"><span class="number">7</span>. 选择“变量值”输入框并输入“on”</span><br><span class="line"><span class="number">8</span>. 点击“确定”按钮</span><br><span class="line"><span class="number">9</span>. 点击“新建…”按钮</span><br><span class="line"><span class="number">10</span>. 选择“变量名”输入框并输入“GOPROXY”</span><br><span class="line"><span class="number">11</span>. 选择“变量值”输入框并输入“https://goproxy.cn”</span><br><span class="line"><span class="number">12</span>. 点击“确定”按钮</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
